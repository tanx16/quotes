#!/usr/bin/env python3
import argparse
import platform
import pickle
import sys
import os.path
import random
import datetime
import json
from collections import defaultdict

def print_quote(user, quote):
    print('{}: {} ({})'.format(user, quote['quote'], quote['time']))

def display_quote(args, quotedict):
    user = args.user
    rand = args.random
    if not quotedict:
        print("No quotes found.")
        return
    # Display random quote for user
    if rand:
        if not user:
            user = random.choice(list(quotedict.keys()))
        quote = random.choice(quotedict[user])
        print_quote(user, quote)
        return
    # Display all quotes for specified user
    if user:
        for quote in quotedict[user]:
            print_quote(user, quote)
        return
    else:
        for user, quotes in quotedict.items():
            for quote in quotes:
                print_quote(user, quote)

def add_quote(args, quotedict):
    user = args.user
    quote = args.quote
    quote = {'quote': quote, 'time': datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}
    quotedict[user].append(quote)
    print_quote(user, quote)

def search_quote(args, quotedict):
    phrase = args.phrase
    user = args.user
    delete = args.delete
    found = False
    if delete:
        ans = input("Are you sure you want to delete all matching entries?\n")
        if ans.strip() != 'y' and ans.strip() != 'yes':
            print("Action aborted.")
            return
    if user:
        matches = [quote for quote in quotedict[user] if phrase in quote['quote']]
        for match in matches:
            found = True
            print_quote(user, match)
            if delete:
                quotedict[user].remove(match)
    else:
        all_quotes = quotedict.values()
        for user, quotes in quotedict.items():
            matches = [quote for quote in quotes if phrase in quote['quote']]
            for match in matches:
                found = True
                print_quote(user, match)
                if delete:
                    quotedict[user].remove(match)
    if not found:
        print("No matches found.")

def merge_users(args, quotedict):
    names = args.names
    if len(names) < 2:
        return
    merge_into, merge_from = names[0], names[1:]
    for name in merge_from:
        print("Merged and deleted {}".format(name))
        for quotes in quotedict[name]:
            quotedict[merge_into].append(quotes)
        del quotedict[name]

def main(argv=None):
    # Check os and set install location (Windows not supported)
    filename = "/var/lib/quotes/quotesdict"

    # Set up arguments
    parser = argparse.ArgumentParser(description='Save and view quotes.')
    subparsers = parser.add_subparsers(dest='command', help='command to run')
    subparsers.required = True
    parser_display = subparsers.add_parser('display', help='display a quote')
    parser_display.add_argument('--user', help='choose user to display')
    parser_display.add_argument('--random', action='store_true', help='pick a random quote')

    parser_add = subparsers.add_parser('add', help='add a quote')
    parser_add.add_argument('user', help='specify quote speaker')
    parser_add.add_argument('quote', help='quote to add')

    parser_search = subparsers.add_parser('search', help='search for a quote')
    parser_search.add_argument('phrase', help='search for phrase in quotes')
    parser_search.add_argument('--user', help='limit search to user')
    parser_search.add_argument('--delete', action='store_true', help='limit search to user')

    parser_merge = subparsers.add_parser('merge', help='merge names')
    parser_merge.add_argument('names', nargs='+', help='merge quotes for multiple names into the first specified name')

    parser_display.set_defaults(func=display_quote)
    parser_add.set_defaults(func=add_quote)
    parser_search.set_defaults(func=search_quote)
    parser_merge.set_defaults(func=merge_users)
    args = parser.parse_args()
    # Check if quotes file exists, if not then make new
    if os.path.exists(filename):
        with open(filename) as quotefile:
            quotedict = json.load(quotefile)
            quotedict = defaultdict(list, quotedict)
    else:
        quotedict = defaultdict(list)

    args.func(args, quotedict)

    # Write and finish
    with open(filename, "w") as f:
        json.dump(quotedict,f)
    return

if __name__ == '__main__':
        sys.exit(main())
